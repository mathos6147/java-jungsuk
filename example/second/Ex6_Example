* 6장 연습문제

6-1) 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오.)
1. 모든 생성자의 이름은 클래스의 이름과 동일해야 한다.
    - 예
2. 생성자는 객체를 생성하기 위한 것이다.
    - 아니요. 객체를 초기화 하기 위한 것
3. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
    - 예
4. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
    - 예
5. 생성자는 오버로딩 할 수 없다.
    - 아니요. 오버로딩을 통해 매개변수들 값의 변화에 따라 객체에 다른 값을 넣어줄 수 있다.

6-2) 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오.)
1. 객체 자신을 가리키는 참조변수이다.
    - 예
2. 클래스 내에서라면 어디서든 사용할 수 있다.
    - 아니요. static 으로 선언된 메서드 에서는 사용하지 못한다.
3. 지역변수와 인스턴스 변수를 구별할 때 사용한다.
    - 예
4. 클래스 메서드 내에서는 사용할 수 없다.
    - 예

6-3) 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오.)
1. 메서드의 이름이 같아야 한다.
    - 예.
2. 매개변수의 개수나 타입이 달라야 한다.
    - 예.
3. 리턴 타입이 달라야 한다.
    - 아니요. 리턴 타입은 상관 없습니다.
4. 매개변수의 이름이 달라야 한다.
    - 아니요. 매개 변수의 이름은 상관 없습니다.

6-4) 다음 중 아래의 add 메서드를 올바르게 오버로딩한 것은? (모두 고르시오.)
long add(int a, int b) {return a + b;}

1. long add(int x, int y) {return x + y;}
    - 아니요. 매개변수의 이름만 다른것은 오버로딩이 아니다.
2. long add(long a, long b) {return a + b;}
    - 예. 매개변수의 타입이 다르기 때문에
3. int add(byte a, byte b) {return a + b;}
    - 예. 매개변수의 타입이 다르기 떄문에
4. int add(long a, int b) {return (int)(a + b);}
    - 예. 매개변수의 타입이 다르기 때문에

6-5) 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오.)
1. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다.
    - 예. 0으로 초기화 된다.
2. 지역변수는 사용하기 전에 반드시 초기화해야 한다.
    - 예. 초기화 하지 않으면 에러가 난다.
3. 초기화 블럭보다 생성자가 먼저 수행된다.
    - 아니요. 초기화 블럭이 먼저 수행된다
4. 명시적 초기화를 제일 우선적으로 고려해야 한다.
    - 예. 명시적 초기화 -> 초기화 블럭 -> 생성자 순으로 고려된다.
5. 클래스 변수보다 인스턴스 변수가 먼저 초기화된다.
    - 아니요. 클래스 변수는 메모리에 로딩될 때 초기화가 이루어지고, 인스턴스 변수는 객체 생성시에 초기화 된다.

6-6) 다음 중 인스턴스 변수의 초기화 순서가 올바른 것은?
1. 기본값-명시적 초기화-초기화 블럭-생성자
    - 예.
2. 기본값-명시적 초기화-생성자-초기화 블럭
3. 기본값-초기화 블럭-명시적 초기화-생성자
4. 기본값-초기화 블럭-생성자-명시적 초기화

6-7) 다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오.)
1. 자동 초기화되므로 별도의 초기화가 필요 없다.
    - 아니요. 초기화가 필요하다.
2. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
    - 예. 메서드가 종료되면 자바가 가비지 콜렉터를 통해 데이터를 삭제한다.
3. 메서드의 매개변수로 선언된 변수도 지역변수이다.
    - 예.
4. 클래스 변수나 인스턴스 변수보다 메모리 부담이 적다.
    - 예. 메모리를 계속 잡아먹는게 아니라 메소드가 끝나면 소멸하기 때문에.
5. 힙(heap) 영역에 생성되며 가비지 컬렉터에 의해 소멸된다.
    - 아니요. 스택 영역에 생성된다.

6-8) 호출 스택이 다음과 같은 상황일 때 옳지 않은 설명은? (모두 고르시오.)
stack = [main, method2, method1, println]

1. 제일 먼저 호출 스택에 저장된 것은 main 메서드이다.
    - 예.
2. println 메서드를 제외한 나머지 메서드들은 모두 종료된 상태이다.
    - 아니요. 종료가 아니라 정지된 상태이다.
3. method2 메서드를 호출한 것은 main 메서드이다.
    - 예.
4. println 메서드가 종료되면 method1 메서드가 수행을 재개한다.
    - 예.
5. main-method2-method1-println의 순서로 호출되었다.
    - 예.
6. 현재 실행 중인 메서드는 println 뿐이다.
    - 예.
